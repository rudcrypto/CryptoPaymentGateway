// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract CryptoPaymentGateway is Ownable {
    struct Payment {
        uint256 id;
        address payer;
        uint256 amount;
        uint256 timestamp;
        bool completed;
    }

    IERC20 public acceptedToken;
    uint256 public paymentCounter;
    mapping(uint256 => Payment) public payments;

    event PaymentReceived(uint256 indexed id, address indexed payer, uint256 amount, uint256 timestamp);
    event PaymentCompleted(uint256 indexed id, address indexed payer, uint256 amount, uint256 timestamp);

    constructor(address _tokenAddress) {
        acceptedToken = IERC20(_tokenAddress);
    }

    function receivePayment(uint256 amount) external {
        require(amount > 0, "Payment amount must be greater than zero");
        require(acceptedToken.transferFrom(msg.sender, address(this), amount), "Payment transfer failed");

        paymentCounter++;
        payments[paymentCounter] = Payment(paymentCounter, msg.sender, amount, block.timestamp, false);

        emit PaymentReceived(paymentCounter, msg.sender, amount, block.timestamp);
    }

    function completePayment(uint256 paymentId) external onlyOwner {
        Payment storage payment = payments[paymentId];
        require(payment.id == paymentId, "Payment does not exist");
        require(!payment.completed, "Payment already completed");

        payment.completed = true;

        emit PaymentCompleted(paymentId, payment.payer, payment.amount, payment.timestamp);
    }

    function withdrawFunds(uint256 amount) external onlyOwner {
        require(amount > 0, "Withdraw amount must be greater than zero");
        require(acceptedToken.balanceOf(address(this)) >= amount, "Insufficient funds");

        acceptedToken.transfer(msg.sender, amount);
    }

    function getPaymentDetails(uint256 paymentId) external view returns (address payer, uint256 amount, uint256 timestamp, bool completed) {
        Payment storage payment = payments[paymentId];
        return (payment.payer, payment.amount, payment.timestamp, payment.completed);
    }
}
